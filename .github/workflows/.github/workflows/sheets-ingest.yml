name: Sheets Ingest (manual)

on:
  workflow_dispatch: {}  # button-only

permissions:
  contents: write

concurrency:
  group: sheets-ingest-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ingest:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install google-api-python-client google-auth google-auth-httplib2 google-auth-oauthlib requests python-dateutil pandas pillow

      - name: Sheets âžœ images/ (download any new image URLs)
        env:
          GOOGLE_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}
          SPLITS_TWEETS_SHEET_ID: ${{ secrets.SPLITS_TWEETS_SHEET_ID }}
        run: |
          python - <<'PY'
          import os, io, json, time, pathlib, re, requests
          from urllib.parse import urlparse
          from google.oauth2 import service_account
          from googleapiclient.discovery import build

          SA_JSON = os.environ["GOOGLE_SERVICE_ACCOUNT_JSON"]
          SHEET_ID = os.environ["SPLITS_TWEETS_SHEET_ID"]

          creds = service_account.Credentials.from_service_account_info(
              json.loads(SA_JSON),
              scopes=['https://www.googleapis.com/auth/spreadsheets.readonly']
          )
          svc = build('sheets','v4',credentials=creds)
          # read the whole tab named "twitter_splits_feed"
          resp = svc.spreadsheets().values().get(
              spreadsheetId=SHEET_ID,
              range='twitter_splits_feed!A:Z'
          ).execute()
          rows = resp.get('values', [])
          if not rows:
              print("[INGEST] no rows")
              raise SystemExit(0)

          # find header indexes
          header = [h.strip().lower() for h in rows[0]]
          def idx(name):
              try: return header.index(name)
              except ValueError: return None

          # commonly present columns (best-effort)
          ts_i   = idx('createdat') or idx('timestamp') or 0
          img_i  = idx('imageurl')  or idx('image_url') or idx('mediaurl') or None

          save_dir = pathlib.Path('images')
          save_dir.mkdir(exist_ok=True)

          # de-dup ledger
          ledger = pathlib.Path('test/sheets_ingest_ledger.txt')
          ledger.parent.mkdir(exist_ok=True)
          seen = set()
          if ledger.exists():
              seen.update([l.strip() for l in ledger.read_text().splitlines() if l.strip()])

          added = 0
          new_seen = []
          for r in rows[1:]:
              if img_i is None or img_i >= len(r): 
                  continue
              url = (r[img_i] or '').strip()
              if not url or not url.startswith('http'):
                  continue
              key = url
              if key in seen:
                  continue
              # make filename
              ts = (r[ts_i] if ts_i is not None and ts_i < len(r) else str(int(time.time())))
              parsed = urlparse(url)
              ext = pathlib.Path(parsed.path).suffix.lower()
              if ext not in ('.png','.jpg','.jpeg','.webp'):
                  ext = '.jpg'
              out = save_dir / f"sheet_{int(time.time())}{ext}"
              try:
                  resp = requests.get(url, timeout=30)
                  resp.raise_for_status()
                  out.write_bytes(resp.content)
                  print(f"[INGEST] saved {out}")
                  added += 1
                  new_seen.append(key)
              except Exception as e:
                  print(f"[WARN] {url}: {e}")

          if new_seen:
              with ledger.open('a') as w:
                  for k in new_seen:
                      w.write(k + '\n')
          print(f"[INGEST] new images: {added}")
          PY

      - name: Commit & push any new images (triggers OCR)
        run: |
          git config user.email "bot@local"
          git config user.name "splits-bot"

          git add images/*.png images/*.jpg images/*.jpeg 2>/dev/null || true
          if ! git diff --cached --quiet; then
            git commit -m "[scraper] sheets ingest images"
            git pull --rebase
            git push
          else
            echo "No new images from Sheets."
          fi
