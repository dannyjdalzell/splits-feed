name: OCR Splits

on:
  push:
    paths:
      - "images/**"
      - "scripts/**"
      - ".github/workflows/ocr-splits.yml"
  workflow_dispatch: {}

permissions:
  contents: write

concurrency:
  group: ocr-splits-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ocr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install pandas pillow pytesseract playwright
          python -m playwright install --with-deps chromium

      - name: Run scraper (pregame)
        run: |
          python3 scripts/pregame_scraper.py || true

      - name: Run audit cleaner (optional)
        run: |
          if [ -f scripts/audit_splits.py ]; then
            python3 scripts/audit_splits.py || true
          fi

      - name: Merge + push splits.csv (conflict-safe)
        shell: bash
        run: |
          set -euo pipefail
          BRANCH="${GITHUB_REF#refs/heads/}"

          git config user.email "bot@local"
          git config user.name "splits-bot"
          git fetch origin "$BRANCH" --depth=1 || true

          mkdir -p /tmp/merge_splits
          if git cat-file -e "origin/$BRANCH:splits.csv" 2>/dev/null; then
            git show "origin/$BRANCH:splits.csv" > /tmp/merge_splits/remote.csv
          else
            : > /tmp/merge_splits/remote.csv
          fi

          [ -f splits.csv ] || : > splits.csv
          cp splits.csv /tmp/merge_splits/local.csv

          cat > /tmp/merge_splits/merge.py <<'PY'
          import pandas as pd
          from pathlib import Path

          COLUMNS = ["timestamp","league","away_team","home_team","market","tickets_pct","handle_pct","line","source"]

          def load(p: Path):
              try:
                  if not p.exists() or p.stat().st_size == 0:
                      return pd.DataFrame(columns=COLUMNS)
                  return pd.read_csv(p, dtype=str, keep_default_na=False)
              except Exception:
                  return pd.DataFrame(columns=COLUMNS)

          remote = load(Path("/tmp/merge_splits/remote.csv"))
          local  = load(Path("/tmp/merge_splits/local.csv"))

          all_rows = pd.concat([remote, local], ignore_index=True)

          for c in all_rows.columns:
              if all_rows[c].dtype == object:
                  all_rows[c] = all_rows[c].astype(str).str.strip()

          all_rows = all_rows.drop_duplicates()
          if "timestamp" in all_rows.columns:
              try:
                  all_rows = all_rows.sort_values("timestamp")
              except Exception:
                  pass

          all_rows.to_csv("splits.csv", index=False)
          print(f"[merge] remote={len(remote)} local={len(local)} -> out={len(all_rows)}")
          PY

          python3 /tmp/merge_splits/merge.py

          git add splits.csv
          git commit -m "[skip ci] merge/append splits.csv" || echo "No changes to commit."

          # push with one retry, then force-with-lease as last resort
          if ! git push origin "HEAD:$BRANCH"; then
            git fetch origin "$BRANCH" --depth=1 || true
            git push --force-with-lease origin "HEAD:$BRANCH"
          fi
