- name: Promote staged â†’ splits.csv (with fallback to boardroom_inputs)
  run: |
    python - <<'PY'
    import pandas as pd, os, sys

    def exists_nonempty(p):
      return os.path.exists(p) and os.path.getsize(p) > 0

    # 1) Preferred: staged splits from OCR/resolver
    src = "audit_out/splits_staged.csv"
    if exists_nonempty(src):
        df = pd.read_csv(src, dtype=str).fillna("")
        if len(df) and {"league","home_team","away_team"}.issubset(df.columns):
            df = df[df.get("league","") != "MIXED"]
            df = df[(df["home_team"].str.len()>1) & (df["away_team"].str.len()>1)]
            if len(df):
                df.to_csv("splits.csv", index=False)
                print("PROMOTE_OK (staged) rows:", len(df))
                sys.exit(0)
        print("staged present but empty/invalid; try fallback")

    # 2) Fallback: boardroom inputs (twitter-weighted pairs + OCR)
    src2 = "audit_out/boardroom_inputs.csv"
    if exists_nonempty(src2):
        b = pd.read_csv(src2, dtype=str).fillna("")
        need = {"home_team","away_team"}
        if not need.issubset(b.columns):
            print("fallback missing required cols; bail"); sys.exit(0)
        out_cols = ["timestamp","league","away_team","home_team","market","tickets_pct","handle_pct","line","source"]
        # fabricate minimal splits rows
        out = pd.DataFrame({
            "timestamp": "",
            "league": b.get("league",""),
            "away_team": b["away_team"],
            "home_team": b["home_team"],
            "market": "UNKNOWN",
            "tickets_pct": "",
            "handle_pct": "",
            "line": "",
            "source": "pipeline_fallback"
        })[out_cols]
        # filter obvious junk
        out = out[(out["home_team"].str.len()>1) & (out["away_team"].str.len()>1)]
        if len(out):
            out.to_csv("splits.csv", index=False)
            print("PROMOTE_OK (fallback) rows:", len(out))
            sys.exit(0)

    print("nothing promotable")
    PY
