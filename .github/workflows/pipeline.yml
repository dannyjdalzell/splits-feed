name: pipeline
on:
  workflow_dispatch:
  schedule:
    - cron: "*/15 * * * *"
permissions:
  contents: write
jobs:
  pipeline:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install pandas
      - name: Sheets → Twitter ingest (always-fresh Export → workspace)
        run: |
          set -euo pipefail
          mkdir -p sources/sheets/twitter
          curl -Lsf "https://docs.google.com/spreadsheets/d/e/2PACX-1vT39ngJbPzNRjcnKVG-Oehiy4qzyrghIvCI0FQbaBj2jc9LYGLbMUZaCQDGN8Ck_8Q465hqsR4AYz3k/pub?gid=77061416&single=true&output=csv"             > sources/sheets/twitter/tweets.csv
          echo "[sheets] wrote     1787 rows → sources/sheets/twitter/tweets.csv"
      - name: Twitter text analysis (signals)
        run: |
          mkdir -p audit_out
          python scripts/analyze_twitter_text.py             --csv sources/sheets/twitter/tweets.csv             --dict dictionaries             --out audit_out/twitter_text_signals.csv
      - name: OCR splits (images → staged)
        run: |
          mkdir -p audit_out
          python scripts/splits_ocr.py             --images images             --out audit_out/splits_staged.csv || echo "[INFO] OCR step produced no rows (ok)"
      - name: Normalize + merge sources
        run: |
          mkdir -p audit_out
          python scripts/normalize_and_merge.py             --splits audit_out/splits_staged.csv             --twitter audit_out/twitter_text_signals.csv             --out audit_out/boardroom_inputs.csv
      - name: Promote staged → splits.csv (with fallback to boardroom_inputs)
        run: |
          python - <<PY
import os, sys, pandas as pd
ROOT = os.getcwd()
AOUT = os.path.join(ROOT,"audit_out")
staged = os.path.join(AOUT,"splits_staged.csv")
board  = os.path.join(AOUT,"boardroom_inputs.csv")
OUT    = os.path.join(ROOT,"splits.csv")

def exists_nonempty(p): return os.path.exists(p) and os.path.getsize(p)>0
def promote_from_df(df):
    need={"away_team","home_team"}
    if not need.issubset(df.columns): return None
    df = df[(df["away_team"].astype(str).str.len()>1)&(df["home_team"].astype(str).str.len()>1)]
    if df.empty: return None
    keep = ["timestamp","league","away_team","home_team","market","tickets_pct","handle_pct","line","source"]
    for k in keep:
        if k not in df.columns: df[k] = ""
    return df[keep]

if exists_nonempty(staged):
    df = pd.read_csv(staged, dtype=str).fillna("")
    out = promote_from_df(df)
    if out is not None and len(out):
        out.to_csv(OUT, index=False)
        print("PROMOTE_OK (staged) rows:", len(out)); sys.exit(0)
    print("staged present but no valid rows; falling back")

if exists_nonempty(board):
    df = pd.read_csv(board, dtype=str).fillna("")
    if {"team_a","team_b"}.issubset(df.columns):
        df = df.rename(columns={"team_a":"away_team","team_b":"home_team"})
    out = promote_from_df(df)
    if out is not None and len(out):
        out.to_csv(OUT, index=False)
        print("PROMOTE_OK (fallback) rows:", len(out)); sys.exit(0)

print("nothing promotable (no valid rows)")
PY
      - name: Live delta analysis (rolling; stop 15m pre-start)
        run: |
          python scripts/live_delta_analysis.py || echo "[live-delta] no-op"
      - name: Commit outputs (with rebase to avoid push races)
        run: |
          set -euo pipefail
          git config user.name  "splits-bot"
          git config user.email "actions@users.noreply.github.com"
          printf "\n# pipeline diagnostics\n/audit_out/unresolved_*.txt\n" >> .gitignore || true
          git add .gitignore || true
          git add sources/sheets/twitter/tweets.csv || true
          git add audit_out/twitter_text_signals.csv audit_out/boardroom_inputs.csv || true
          git add splits.csv || true
          test -d reports && git add -A reports || true
          git diff --cached --quiet && { echo "no changes"; exit 0; }
          git fetch origin
          git pull --rebase origin main || git rebase --strategy-option=theirs origin/main
          git commit -m "ci: refresh + promote + live-delta (auto)" || true
          git push || echo "[push] remote moved; will land next cycle"
