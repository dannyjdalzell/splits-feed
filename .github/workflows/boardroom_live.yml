name: Boardroom LIVE (build + render + publish)

on:
  workflow_dispatch:
  schedule:
    - cron: "*/15 * * * *"

jobs:
  live:
    runs-on: ubuntu-latest
    env:
      STAR5: "6.0"
      STAR4: "3.5"
      LOOKBACK_HOURS: "72"
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install pandas python-dateutil

      - name: Ensure boardroom dir
        run: mkdir -p boardroom

      - name: Peek clean splits rows
        id: peek
        shell: bash
        run: |
          rows=0
          if [ -f splits.csv ]; then
            rows=$( (tail -n +2 splits.csv | grep -v '^[[:space:]]*$' | wc -l) || echo 0 )
          fi
          echo "rows=$rows" >> "$GITHUB_OUTPUT"
          if [ "$rows" -ge 25 ]; then has=true; else has=false; fi
          echo "has=$has" >> "$GITHUB_OUTPUT"
          echo "[peek] splits rows: $rows (has=$has)"

      - name: Render Boardroom (splits + twitter)
        if: steps.peek.outputs.has == 'true'
        run: |
          python scripts/boardroom_render.py \
            --picks_csv boardroom/boardroom_picks.csv \
            --signals   audit_out/twitter_text_signals.csv \
            --splits    splits.csv \
            --hours     "${LOOKBACK_HOURS}" --min_signals 2 --star5 "${STAR5}" --star4 "${STAR4}"

      - name: Render Boardroom (twitter-only fallback)
        if: steps.peek.outputs.has != 'true'
        run: |
          python scripts/boardroom_render.py \
            --picks_csv boardroom/boardroom_picks.csv \
            --signals   audit_out/twitter_text_signals.csv \
            --hours     "${LOOKBACK_HOURS}" --min_signals 2 --star5 "${STAR5}" --star4 "${STAR4}"

      - name: Build Gist payload
        run: |
          python - <<'PY'
          import json,base64,os
          def b64(p):
              return base64.b64encode(open(p,'rb').read()).decode()
          files={}
          for p in ["boardroom/boardroom_picks.csv","boardroom/boardroom_picks.md","splits.csv"]:
              if os.path.exists(p):
                  files[os.path.basename(p)]={"content":open(p,"r",encoding="utf-8",errors="ignore").read()}
          # minimal placeholder to keep gist visible
          if not files: files["placeholder.txt"]={"content":"OK"}
          with open("gist_payload.json","w",encoding="utf-8") as f:
              json.dump({"files":files},f)
          PY

      - name: Publish to Gist
        env:
          GIST_ID: ${{ secrets.GIST_ID }}
          GIST_TOKEN: ${{ secrets.GIST_TOKEN }}
        run: |
          set -euo pipefail
          http_code=$(curl -sS -o resp.json -w "%{http_code}" -X PATCH \
            -H "Authorization: token ${GIST_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/gists/${GIST_ID} \
            -d @gist_payload.json)
          echo "HTTP ${http_code}"
          python - <<'PY'
          import json
          j=json.load(open("resp.json","r",encoding="utf-8"))
          if isinstance(j,dict) and "files" in j:
              print("Gist now contains:", ", ".join(sorted(j["files"].keys())))
          else:
              print(j)
          PY
          test "$http_code" = "200" -o "$http_code" = "201"
