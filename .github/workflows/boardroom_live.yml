name: Boardroom LIVE (build + publish, strict)

on:
  schedule: [{ cron: "*/15 * * * *" }]
  workflow_dispatch:

jobs:
  run:
    runs-on: ubuntu-latest
    permissions: { contents: write }
    env:
      GIST_ID: "8e8d7d673ffbf06aa69e6dc7de9ace5d"
      GIST_TOKEN: ${{ secrets.GIST_TOKEN }}

    steps:
      - uses: actions/checkout@v3
        with: { fetch-depth: 0 }

      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; else pip install pandas; fi

      - name: Ensure folders
        run: |
          mkdir -p boardroom audit_out sources/sheets/twitter

      - name: Build boardroom picks
        run: |
          if [ -s audit_out/twitter_text_signals.csv ] && [ -s splits.csv ]; then
            python scripts/boardroom_picks.py \
              --signals audit_out/twitter_text_signals.csv \
              --splits   splits.csv
          else
            echo "::warning::Missing signals or splits; publishing placeholders."
            : > boardroom/boardroom_picks.csv
            : > boardroom/boardroom_picks.md
          fi

      - name: Commit artifacts if changed
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add boardroom/boardroom_picks.csv boardroom/boardroom_picks.md || true
          if git diff --staged --quiet; then
            echo "No boardroom changes."
          else
            git commit -m "CI(Boardroom): update picks [skip ci]"
            git push
          fi

      - name: Prepare Gist payload
        run: |
          python - <<'PY'
          import json, os, io
          def load(p):
              try: 
                  with open(p,'r',encoding='utf-8',errors='replace') as f:
                      return f.read()
              except Exception:
                  return ""
          payload = {"files":{
            "boardroom_picks.csv":      {"content": load("boardroom/boardroom_picks.csv")},
            "boardroom_picks.md":       {"content": load("boardroom/boardroom_picks.md")},
            "twitter_text_signals.csv": {"content": load("audit_out/twitter_text_signals.csv")},
            "tweets.csv":               {"content": load("sources/sheets/twitter/tweets.csv")},
            "splits.csv":               {"content": load("splits.csv")}
          }}
          open("gist_payload.json","w",encoding="utf-8").write(json.dumps(payload))
          # Print sizes so we know we're sending something
          import os
          for p in ["boardroom/boardroom_picks.csv","boardroom/boardroom_picks.md","audit_out/twitter_text_signals.csv","sources/sheets/twitter/tweets.csv","splits.csv"]:
              print(f"SEND {p}: {'missing' if not os.path.exists(p) else os.path.getsize(p)} bytes")
          PY

      - name: Verify Gist config
        run: |
          set -e
          echo "Gist URL: https://gist.github.com/${{ github.repository_owner }}/${GIST_ID}"
          if [ -z "${GIST_ID:-}" ]; then echo "GIST_ID missing"; exit 1; fi
          if [ -z "${GIST_TOKEN:-}" ]; then echo "GIST_TOKEN missing (add a CLASSIC PAT with 'gist' scope)"; exit 1; fi

      - name: Publish to Gist (strict)
        run: |
          set -euo pipefail
          http_code=$(curl -sS -o resp.json -w "%{http_code}" -X PATCH \
            -H "Authorization: token ${GIST_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/gists/${GIST_ID} \
            -d @gist_payload.json)
          echo "HTTP ${http_code}"
          # Show result keys (not file contents)
          python - <<'PY'
          import json
          j=json.load(open("resp.json","r",encoding="utf-8"))
          if isinstance(j,dict) and "files" in j:
              print("Gist now contains:", ", ".join(sorted(j["files"].keys())))
          else:
              print(j)
          PY
          test "$http_code" = "200" -o "$http_code" = "201"

      - name: Confirm via GET
        run: |
          python - <<'PY'
          import os, json, urllib.request
          url=f'https://api.github.com/gists/{os.environ["GIST_ID"]}'
          j=json.load(urllib.request.urlopen(url))
          print("Public GET files:", ", ".join(sorted(j["files"].keys())))
          PY
